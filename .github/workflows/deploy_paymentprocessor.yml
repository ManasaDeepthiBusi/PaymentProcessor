name: eCommerceApplication/Deploy_PaymentProcessor
on:
  push:
    branches:
    - main
env:
  appRunnerAccessRoleArn: arn:aws:iam::123456789012:role/apprunner-ecr-access-role
  appRunnerServiceArnDev: arn:aws:apprunner:us-east-1:123456789012:service/paymentprocessor-dev/xxxxxxxxxxxx
  appRunnerServiceArnProd: arn:aws:apprunner:us-east-1:123456789012:service/paymentprocessor-prod/xxxxxxxxxxxxx
  appRunnerServiceArnQa: arn:aws:apprunner:us-east-1:123456789012:service/paymentprocessor-qa/xxxxxxxxxxxx
  appRunnerServiceArnStaging: arn:aws:apprunner:us-east-1:123456789012:service/paymentprocessor-staging/xxxxxxxxxx
  awsRegion: us-east-1
  buildConfiguration: Release
  containerPort: '8080'
  ecrRepoName: paymentprocessor-api
  imageTag: "${{ github.run_id }}"
jobs:
  Dev-DeployToDev:
    name: Deploy to Dev
    runs-on: ubuntu-latest
    environment:
      name: dev
    if: github.RUN_NUMBER == 1
    steps:
    - name: checkout
      uses: actions/checkout@v4.1.0
    - name: download artifact
      uses: actions/download-artifact@v4.1.0
    - uses: actions/checkout@v4.1.0
    - name: Install Docker and AWS CLI
      run: |-
        sudo apt-get update
        sudo apt-get install -y docker.io jq awscli
        sudo usermod -aG docker ${{ env.whoami }}
    - name: Verify Docker and AWS CLI
      run: |-
        docker --version
        aws --version
    - name: Get AWS account ID
      env:
        AWS_ACCESS_KEY_ID: "${{ env.AWS_ACCESS_KEY_ID }}"
        AWS_SECRET_ACCESS_KEY: "${{ env.AWS_SECRET_ACCESS_KEY }}"
        AWS_DEFAULT_REGION: "${{ env.awsRegion }}"
      run: |-
        echo "Using AWS region: ${{ env.awsRegion }}"
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        echo "AWS Account: ${ACCOUNT_ID}"
        echo "##vso[task.setvariable variable=AccountId]${ACCOUNT_ID}"
    - name: Ensure ECR repository exists
      env:
        AWS_ACCESS_KEY_ID: "${{ env.AWS_ACCESS_KEY_ID }}"
        AWS_SECRET_ACCESS_KEY: "${{ env.AWS_SECRET_ACCESS_KEY }}"
        AWS_DEFAULT_REGION: "${{ env.awsRegion }}"
      run: |-
        set -e
        aws ecr describe-repositories --repository-names ${{ env.ecrRepoName }} >/dev/null 2>&1 || \
          aws ecr create-repository --repository-names ${{ env.ecrRepoName }}
    - name: Docker login to ECR
      env:
        AWS_ACCESS_KEY_ID: "${{ env.AWS_ACCESS_KEY_ID }}"
        AWS_SECRET_ACCESS_KEY: "${{ env.AWS_SECRET_ACCESS_KEY }}"
        AWS_DEFAULT_REGION: "${{ env.awsRegion }}"
      run: |-
        ECR_URI=${{ env.AccountId }}.dkr.ecr.${{ env.awsRegion }}.amazonaws.com
        aws ecr get-login-password --region ${{ env.awsRegion }} | docker login --username AWS --password-stdin ${ECR_URI}
        echo "##vso[task.setvariable variable=EcrUri]${ECR_URI}"
    - name: Build and push API image
      run: |-
        IMAGE=${{ env.EcrUri }}/${{ env.ecrRepoName }}:${{ env.imageTag }}
        echo "Building image ${IMAGE}"
        docker build -f PaymentProcessor.Api/Dockerfile -t ${IMAGE} .
        docker push ${IMAGE}
        echo "##vso[task.setvariable variable=ImageUri]${IMAGE}"
    - name: Update App Runner service (Dev)
      env:
        AWS_ACCESS_KEY_ID: "${{ env.AWS_ACCESS_KEY_ID }}"
        AWS_SECRET_ACCESS_KEY: "${{ env.AWS_SECRET_ACCESS_KEY }}"
        AWS_DEFAULT_REGION: "${{ env.awsRegion }}"
      run: |-
        set -e
        PARAMS_FILE="Deployment/Transforms/Dev/parameters.json"
        echo "Loading parameters from ${PARAMS_FILE}"
        ENV_ARR=$(jq -c 'to_entries | map({name: .key, value: ( .value|tostring)})' "${PARAMS_FILE}")
        # Append ASPNETCORE_URLS
        ENV_ARR=$(jq -c --arg port "${{ env.containerPort }}" '. + [{"name":"ASPNETCORE_URLS","value":"http://+:" + $port}]' <<< "$ENV_ARR")
        # Compose source configuration file
        cat > source-config.json <<EOF
        {
          "ImageRepository": {
            "ImageIdentifier": "${{ env.ImageUri }}",
            "ImageRepositoryType": "ECR",
            "ImageConfiguration": {
              "Port": "${{ env.containerPort }}",
              "RuntimeEnvironmentVariables": $ENV_ARR
            }
          },
          "AuthenticationConfiguration": {
            "AccessRoleArn": "${{ env.appRunnerAccessRoleArn }}"
          }
        }
        EOF
        aws apprunner update-service --service-arn ${{ env.appRunnerServiceArnDev }} --source-configuration file://source-config.json
  QA-DeployToQa:
    name: Deploy to QA
    needs:
    - Dev-DeployToDev
    runs-on: ubuntu-latest
    environment:
      name: qa
    if: success() && github.RUN_NUMBER == 1
    steps:
    - name: checkout
      uses: actions/checkout@v4.1.0
    - name: download artifact
      uses: actions/download-artifact@v4.1.0
    - uses: actions/checkout@v4.1.0
    - name: Install AWS CLI and jq
      run: |-
        sudo apt-get update
        sudo apt-get install -y jq awscli
    - name: Update App Runner service (QA)
      env:
        AWS_ACCESS_KEY_ID: "${{ env.AWS_ACCESS_KEY_ID }}"
        AWS_SECRET_ACCESS_KEY: "${{ env.AWS_SECRET_ACCESS_KEY }}"
        AWS_DEFAULT_REGION: "${{ env.awsRegion }}"
      run: |-
        set -e
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        echo "##vso[task.setvariable variable=AccountId]${ACCOUNT_ID}"
        IMAGE=${{ env.AccountId }}.dkr.ecr.${{ env.awsRegion }}.amazonaws.com/${{ env.ecrRepoName }}:${{ env.imageTag }}
        echo "Using image ${IMAGE}"
        PARAMS_FILE="Deployment/Transforms/QA/parameters.json"
        ENV_ARR=$(jq -c 'to_entries | map({name: .key, value: ( .value|tostring)})' "${PARAMS_FILE}")
        ENV_ARR=$(jq -c --arg port "${{ env.containerPort }}" '. + [{"name":"ASPNETCORE_URLS","value":"http://+:" + $port}]' <<< "$ENV_ARR")
        cat > source-config.json <<EOF
        {
          "ImageRepository": {
            "ImageIdentifier": "${IMAGE}",
            "ImageRepositoryType": "ECR",
            "ImageConfiguration": {
              "Port": "${{ env.containerPort }}",
              "RuntimeEnvironmentVariables": $ENV_ARR
            }
          },
          "AuthenticationConfiguration": {
            "AccessRoleArn": "${{ env.appRunnerAccessRoleArn }}"
          }
        }
        EOF
        aws apprunner update-service --service-arn ${{ env.appRunnerServiceArnQa }} --source-configuration file://source-config.json
  Staging-DeployToStaging:
    name: Deploy to Staging
    needs:
    - QA-DeployToQa
    runs-on: ubuntu-latest
    environment:
      name: staging
    if: success() && github.RUN_NUMBER == 1
    steps:
    - name: checkout
      uses: actions/checkout@v4.1.0
    - name: download artifact
      uses: actions/download-artifact@v4.1.0
    - uses: actions/checkout@v4.1.0
    - name: Install AWS CLI and jq
      run: |-
        sudo apt-get update
        sudo apt-get install -y jq awscli
    - name: Update App Runner service (Staging/Beta)
      env:
        AWS_ACCESS_KEY_ID: "${{ env.AWS_ACCESS_KEY_ID }}"
        AWS_SECRET_ACCESS_KEY: "${{ env.AWS_SECRET_ACCESS_KEY }}"
        AWS_DEFAULT_REGION: "${{ env.awsRegion }}"
      run: |-
        set -e
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        IMAGE=${ACCOUNT_ID}.dkr.ecr.${{ env.awsRegion }}.amazonaws.com/${{ env.ecrRepoName }}:${{ env.imageTag }}
        PARAMS_FILE="Deployment/Transforms/BETA/parameters.json"
        ENV_ARR=$(jq -c 'to_entries | map({name: .key, value: ( .value|tostring)})' "${PARAMS_FILE}")
        ENV_ARR=$(jq -c --arg port "${{ env.containerPort }}" '. + [{"name":"ASPNETCORE_URLS","value":"http://+:" + $port}]' <<< "$ENV_ARR")
        cat > source-config.json <<EOF
        {
          "ImageRepository": {
            "ImageIdentifier": "${IMAGE}",
            "ImageRepositoryType": "ECR",
            "ImageConfiguration": {
              "Port": "${{ env.containerPort }}",
              "RuntimeEnvironmentVariables": $ENV_ARR
            }
          },
          "AuthenticationConfiguration": {
            "AccessRoleArn": "${{ env.appRunnerAccessRoleArn }}"
          }
        }
        EOF
        aws apprunner update-service --service-arn ${{ env.appRunnerServiceArnStaging }} --source-configuration file://source-config.json
  Prod-DeployToProd:
    name: Deploy to Prod
    needs:
    - Staging-DeployToStaging
    runs-on: ubuntu-latest
    environment:
      name: prod
    if: success() && github.RUN_NUMBER == 1
    steps:
    - name: checkout
      uses: actions/checkout@v4.1.0
    - name: download artifact
      uses: actions/download-artifact@v4.1.0
    - uses: actions/checkout@v4.1.0
    - name: Install AWS CLI and jq
      run: |-
        sudo apt-get update
        sudo apt-get install -y jq awscli
    - name: Update App Runner service (Prod)
      env:
        AWS_ACCESS_KEY_ID: "${{ env.AWS_ACCESS_KEY_ID }}"
        AWS_SECRET_ACCESS_KEY: "${{ env.AWS_SECRET_ACCESS_KEY }}"
        AWS_DEFAULT_REGION: "${{ env.awsRegion }}"
      run: |-
        set -e
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        IMAGE=${ACCOUNT_ID}.dkr.ecr.${{ env.awsRegion }}.amazonaws.com/${{ env.ecrRepoName }}:${{ env.imageTag }}
        PARAMS_FILE="Deployment/Transforms/Prod/parameters.json"
        ENV_ARR=$(jq -c 'to_entries | map({name: .key, value: ( .value|tostring)})' "${PARAMS_FILE}")
        ENV_ARR=$(jq -c --arg port "${{ env.containerPort }}" '. + [{"name":"ASPNETCORE_URLS","value":"http://+:" + $port}]' <<< "$ENV_ARR")
        cat > source-config.json <<EOF
        {
          "ImageRepository": {
            "ImageIdentifier": "${IMAGE}",
            "ImageRepositoryType": "ECR",
            "ImageConfiguration": {
              "Port": "${{ env.containerPort }}",
              "RuntimeEnvironmentVariables": $ENV_ARR
            }
          },
          "AuthenticationConfiguration": {
            "AccessRoleArn": "${{ env.appRunnerAccessRoleArn }}"
          }
        }
        EOF
        aws apprunner update-service --service-arn ${{ env.appRunnerServiceArnProd }} --source-configuration file://source-config.json
